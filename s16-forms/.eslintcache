[{"/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/index.js":"1","/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/App.js":"2","/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/components/SimpleInput.js":"3","/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/hooks/use-input.js":"4","/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/components/BasicForm.js":"5"},{"size":179,"mtime":1648643023000,"results":"6","hashOfConfig":"7"},{"size":236,"mtime":1661996580107,"results":"8","hashOfConfig":"7"},{"size":2304,"mtime":1661994850369,"results":"9","hashOfConfig":"7"},{"size":1173,"mtime":1661997301629,"results":"10","hashOfConfig":"7"},{"size":2947,"mtime":1661996520632,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ob5a8s",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/index.js",[],["25","26"],"/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/App.js",[],"/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/components/SimpleInput.js",["27","28","29"],"import { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst validateEmail = (email) => {\n  if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n    return true;\n  }\n  return false;\n};\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput(validateEmail);\n\n  // overall form validation\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  // form submission handler\n  const formSubmissionHandler = (event) => {\n    event.preventDefault(); //  the page won't be reloaded\n\n    if (!formIsValid) {\n      return;\n    }\n\n    resetNameInput();\n    resetEmailInput();\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClass = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n\n      <div className={emailInputClass}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Must be a valid email address.</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/hooks/use-input.js",[],"/mnt/c/Users/leoho/Desktop/udemy-react-course/s16-forms/src/components/BasicForm.js",["30","31"],"import useInput from \"../hooks/use-input\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\nconst isEmail = (value) => {\n  if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\n    return true;\n  }\n  return false;\n};\n\nconst BasicForm = (props) => {\n  const {\n    value: firstNameValue,\n    isValid: firstNameIsValid,\n    hasError: firstNameHasError,\n    valueChangeHandler: firstNameChangeHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstName,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: lastNameValue,\n    isValid: lastNameIsValid,\n    hasError: lastNameHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastName,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: emailValue,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail,\n  } = useInput(isEmail);\n\n  const firstNameClasses = firstNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const lastNameClasses = lastNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const emailClasses = emailHasError ? \"form-control invalid\" : \"form-control\";\n\n  let formIsValid = false;\n  if (firstNameIsValid && lastNameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    if (!formIsValid) {\n      return;\n    }\n    resetFirstName();\n    resetLastName();\n    resetEmail();\n  };\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className=\"control-group\">\n        <div className={firstNameClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={firstNameValue}\n            onChange={firstNameChangeHandler}\n            onBlur={firstNameBlurHandler}\n          />\n          {firstNameHasError && <p className=\"error-text\">Please enter a first name.</p>}\n        </div>\n\n        <div className={lastNameClasses}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={lastNameValue}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameHasError && <p className=\"error-text\">Please enter a last name.</p>}\n        </div>\n      </div>\n      <div className={emailClasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          value={emailValue}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {emailHasError && <p className=\"error-text\">Please enter a valid email address.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":1,"column":10,"nodeType":"38","messageId":"39","endLine":1,"endColumn":18},{"ruleId":"40","severity":1,"message":"41","line":5,"column":14,"nodeType":"42","messageId":"43","endLine":5,"endColumn":15,"suggestions":"44"},{"ruleId":"40","severity":1,"message":"41","line":5,"column":30,"nodeType":"42","messageId":"43","endLine":5,"endColumn":31,"suggestions":"45"},{"ruleId":"40","severity":1,"message":"41","line":5,"column":14,"nodeType":"42","messageId":"43","endLine":5,"endColumn":15,"suggestions":"46"},{"ruleId":"40","severity":1,"message":"41","line":5,"column":30,"nodeType":"42","messageId":"43","endLine":5,"endColumn":31,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["50","51"],["52","53"],["54","55"],["56","57"],"no-global-assign","no-unsafe-negation",{"messageId":"58","fix":"59","desc":"60"},{"messageId":"61","fix":"62","desc":"63"},{"messageId":"58","fix":"64","desc":"60"},{"messageId":"61","fix":"65","desc":"63"},{"messageId":"58","fix":"66","desc":"60"},{"messageId":"61","fix":"67","desc":"63"},{"messageId":"58","fix":"68","desc":"60"},{"messageId":"61","fix":"69","desc":"63"},"removeEscape",{"range":"70","text":"71"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"72","text":"73"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"74","text":"71"},{"range":"75","text":"73"},{"range":"76","text":"71"},{"range":"77","text":"73"},{"range":"78","text":"71"},{"range":"79","text":"73"},[126,127],"",[126,126],"\\",[142,143],[142,142],[137,138],[137,137],[153,154],[153,153]]